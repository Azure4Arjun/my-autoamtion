USE Master;
GO
CREATE DATABASE EventNotifications;
----------
USE EventNotifications;
GO
ALTER DATABASE EventNotifications SET ENABLE_BROKER
--------
CREATE TABLE [dbo].[LoggedEvents] (
 EventNumber INT IDENTITY PRIMARY KEY,
 EventType NVARCHAR(256),
 EventTime DATETIME,
 LoginName sysname NULL,
 UserName sysname NULL,
 ServerName sysname NULL,
 DatabaseName sysname NULL,
 SchemaName sysname NULL,
 ObjectName sysname NULL,
 ObjectType sysname NULL,
 TSQLCmdText NVARCHAR(MAX) NULL
 ) ;
----------
CREATE QUEUE NotifyQueue;
----------
CREATE SERVICE NotifyService
ON QUEUE NotifyQueue
(
[http://schemas.microsoft.com/SQL/Notifications/PostEventNotification]
);
---------
CREATE ROUTE rtNotify
WITH SERVICE_NAME = 'NotifyService', ADDRESS = 'LOCAL'
--------------
CREATE EVENT NOTIFICATION AUDIT_LOGIN_Notification
ON SERVER
FOR
ddl_database_security_events,CREATE_DATABASE,ALTER_DATABASE,DROP_DATABASE,CREATE_TABLE
, DROP_TABLE,
ALTER_TABLE,CREATE_INDEX,DROP_INDEX,ALTER_INDEX,CREATE_VIEW,DROP_VIEW,ALTER_VIEW,CREATE_FUNCTION,ALTER_FUNCTION,DROP_FUNCTION,CREATE_PROCEDURE, DROP_PROCEDURE,
ALTER_PROCEDURE, CREATE_LINKED_SERVER,DROP_LINKED_SERVER,ALTER_LINKED_SERVER
TO SERVICE 'NotifyService', 'current database';
GO
---AUDIT_LOGIN
-----------
SELECT * FROM NotifyQueue
-----------
SELECT CAST(message_body AS xml) FROM NotifyQueue
------------
CREATE PROCEDURE [dbo].[LogEventsProc]
AS
SET NOCOUNT ON;
DECLARE @message_body XML,
 @message_type_name NVARCHAR(256),
--MSSQL Server Event Notification
--Created By: Abhijit Shedulkar [Clover Infotech]
 @dialog UNIQUEIDENTIFIER ;
-- This procedure continues to process messages in the queue until the
-- queue is empty.
WHILE (1 = 1)
BEGIN
 BEGIN TRANSACTION ;
 -- Receive the next available message
 WAITFOR (
 RECEIVE TOP(1) -- just handle one message at a time
 @message_type_name=message_type_name, --the type of message received
 @message_body=message_body, -- the message contents
 @dialog = conversation_handle -- the identifier of the dialog this message was received on
  FROM NotifyQueue
 ), TIMEOUT 2000 ; -- if the queue is empty for two seconds, give up and go away
 -- If RECEIVE did not return a message, roll back the transaction
 -- and break out of the while loop, exiting the procedure.
 IF (@@ROWCOUNT = 0)
 BEGIN
 ROLLBACK TRANSACTION ;
 BREAK ;
 END ;
 -- Check to see if the message is an end dialog message.
 IF (@message_type_name =
'http://schemas.microsoft.com/SQL/ServiceBroker/EndDialog')
 BEGIN
 PRINT 'End Dialog received for dialog # ' + cast(@dialog as nvarchar(40)) ;
 END CONVERSATION @dialog ;
 END ;
 ELSE
 BEGIN
 -- Extract the event information using XQuery.
 --++++++++++++++++**************put if condition here

 -- Use XQuery to extract XML values to be inserted into the log table
 INSERT INTO [dbo].[LoggedEvents] (
 EventType,
 EventTime,
 LoginName,
 UserName,
 ServerName,
 DatabaseName,
 SchemaName,
 ObjectName,
 ObjectType,
 TSQLCmdText
 )
 VALUES
 (
 CAST(@message_body.query('/EVENT_INSTANCE/EventType/text()') AS NVARCHAR(256)),
 CAST(CAST(@message_body.query('/EVENT_INSTANCE/PostTime/text()') AS NVARCHAR(MAX))
AS DATETIME),
 CAST(@message_body.query('/EVENT_INSTANCE/LoginName/text()') AS sysname),
 @message_body.value('(/EVENT_INSTANCE/ClientHost)[1]', 'NVARCHAR(15)') ,
 CAST(@message_body.query('/EVENT_INSTANCE/ServerName/text()') AS sysname),
 CAST(@message_body.query('/EVENT_INSTANCE/DatabaseName/text()') AS sysname),
 CAST(@message_body.query('/EVENT_INSTANCE/SchemaName/text()') AS sysname),
 CAST(@message_body.query('/EVENT_INSTANCE/ObjectName/text()') AS sysname),
 CAST(@message_body.query('/EVENT_INSTANCE/ObjectType/text()') AS sysname),
 CAST(@message_body.query('/EVENT_INSTANCE/TSQLCommand/CommandText/text()') AS NVARCHAR(MAX))
----Created By: Abhijit Shedulkar [Clover Infotech]
 ) ;

 END ;
 COMMIT TRANSACTION ;
END ;
GO
---------------------------
ALTER QUEUE [dbo].[NotifyQueue]
 WITH ACTIVATION (
 -- Activation turned on
 STATUS = ON,
 -- The name of the proc to process messages for this queue
 PROCEDURE_NAME = [dbo].[LogEventsProc] ,
 -- The maximum number of copies of the proc to start
 MAX_QUEUE_READERS = 2,
 -- Start the procedure as the user who created the queue.
 EXECUTE AS SELF
 ) ;
--------------------
select * from LoggedEvents
-------------
